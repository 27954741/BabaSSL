# Generated with generate_ssl_tests.pl

num_tests = 3

test-0 = 0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only
test-1 = 1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode
test-2 = 2-test ntls request fail when server ntls lurk not set PrivateKey
# ===========================================================

[0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only]
ssl_conf = 0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl

[0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl]
server = 0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server
client = 0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client

[0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
Lurk = on
LurkNtls = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem

[0-test cipher ECC-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client]
CipherString = ECC-SM2-WITH-SM4-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-0]
ExpectedCipher = ECC-SM2-WITH-SM4-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode]
ssl_conf = 1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-ssl

[1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-ssl]
server = 1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-server
client = 1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-client

[1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/SE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/SE.key.pem
Lurk = on
LurkNtls = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/SS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/SS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem

[1-test cipher ECDHE-SM2-WITH-SM4-SM3 in NTLS_UNIQUE mode-client]
CipherString = ECDHE-SM2-WITH-SM4-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/CE.cert.pem
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/CE.key.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/CS.cert.pem
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/CS.key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-1]
ExpectedCipher = ECDHE-SM2-WITH-SM4-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[2-test ntls request fail when server ntls lurk not set PrivateKey]
ssl_conf = 2-test ntls request fail when server ntls lurk not set PrivateKey-ssl

[2-test ntls request fail when server ntls lurk not set PrivateKey-ssl]
server = 2-test ntls request fail when server ntls lurk not set PrivateKey-server
client = 2-test ntls request fail when server ntls lurk not set PrivateKey-client

[2-test ntls request fail when server ntls lurk not set PrivateKey-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
CipherString = DEFAULT
Enable_ntls = on
Lurk = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem

[2-test ntls request fail when server ntls lurk not set PrivateKey-client]
CipherString = ECC-SM2-WITH-SM4-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/CA.cert.pem
VerifyMode = Peer

[test-2]
ExpectedResult = ServerFail
Method = NTLS


