use strict;
use warnings;

package ssltests;
use OpenSSL::Test::Utils;

our @tests = (
    {
        name => "test rsa sign lurk",
        server => {
            "Certificate" => test_pem("server-pss-cert.pem"),
            "PrivateKey" => test_pem("server-pss-key.pem"),
            "Lurk" => "on",
        },
        client => {
        },
        test   => {
            "ExpectedResult" => "Success",
        },
    },

    {
        name => "test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256",
        server => {
            "MinProtocol" => "TLSv1.2",
            "MaxProtocol" => "TLSv1.2",
            "Certificate" => test_pem("test_rsa_crt.pem"),
            "PrivateKey" => test_pem("test_rsa_key.pem"),
            "Lurk" => "on",
        },
        client => {
            "MinProtocol" => "TLSv1.2",
            "MaxProtocol" => "TLSv1.2",
            "VerifyCAFile" => test_pem("test_rsa_crt.pem"),
            "CipherString" => "AES128-GCM-SHA256",
        },
        test   => {
            "ExpectedResult" => "Success",
            "ExpectedCipher" => "AES128-GCM-SHA256",
        },
    },

    {
        name => "test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA",
        server => {
            "MinProtocol" => "TLSv1",
            "MaxProtocol" => "TLSv1",
            "Certificate" => test_pem("test_rsa_crt.pem"),
            "PrivateKey" => test_pem("test_rsa_key.pem"),
            "Lurk" => "on",
        },
        client => {
            "MinProtocol" => "TLSv1",
            "MaxProtocol" => "TLSv1",
            "VerifyCAFile" => test_pem("test_rsa_crt.pem"),
            "CipherString" => "AES128-SHA",
            "ExtendedMasterSecret" => "off",
        },
        test   => {
            "ExpectedResult" => "Success",
        },
    },

    {
        name => "test ecc sign lurk",
        server => {
            "Certificate" => test_pem("server-cecdsa-cert.pem"),
            "PrivateKey" => test_pem("server-cecdsa-key.pem"),
            "Lurk" => "on",
        },
        client => {
        },
        test   => {
            "ExpectedResult" => "Success",
        },
    },

    {
        name => "test ecc sign lurk with TLSv1.2",
        server => {
            "MinProtocol" => "TLSv1.2",
            "MaxProtocol" => "TLSv1.2",
            "Certificate" => test_pem("server-cecdsa-cert.pem"),
            "PrivateKey" => test_pem("server-cecdsa-key.pem"),
            "Lurk" => "on",
        },
        client => {
            "MinProtocol" => "TLSv1.2",
            "MaxProtocol" => "TLSv1.2",
        },
        test   => {
            "ExpectedResult" => "Success",
        },
    },
);


push @tests unless disabled("lurk");
