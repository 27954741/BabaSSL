# Generated with generate_ssl_tests.pl

num_tests = 5

test-0 = 0-test rsa sign lurk
test-1 = 1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256
test-2 = 2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA
test-3 = 3-test ecc sign lurk
test-4 = 4-test ecc sign lurk with TLSv1.2
# ===========================================================

[0-test rsa sign lurk]
ssl_conf = 0-test rsa sign lurk-ssl

[0-test rsa sign lurk-ssl]
server = 0-test rsa sign lurk-server
client = 0-test rsa sign lurk-client

[0-test rsa sign lurk-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
Lurk = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[0-test rsa sign lurk-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-0]
ExpectedResult = Success


# ===========================================================

[1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256]
ssl_conf = 1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-ssl

[1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-ssl]
server = 1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-server
client = 1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-client

[1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-server]
Certificate = ${ENV::TEST_CERTS_DIR}/test_rsa_crt.pem
CipherString = DEFAULT
Lurk = on
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/test_rsa_key.pem

[1-test rsa decrypt and sign lurk with TLSv1.2 and AES128-GCM-SHA256-client]
CipherString = AES128-GCM-SHA256
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/test_rsa_crt.pem
VerifyMode = Peer

[test-1]
ExpectedCipher = AES128-GCM-SHA256
ExpectedResult = Success


# ===========================================================

[2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA]
ssl_conf = 2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-ssl

[2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-ssl]
server = 2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-server
client = 2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-client

[2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-server]
Certificate = ${ENV::TEST_CERTS_DIR}/test_rsa_crt.pem
CipherString = DEFAULT
Lurk = on
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/test_rsa_key.pem

[2-test rsa decrypt and sign lurk with TLSv1.0 and AES128-SHA-client]
CipherString = AES128-SHA
ExtendedMasterSecret = off
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/test_rsa_crt.pem
VerifyMode = Peer

[test-2]
ExpectedResult = Success


# ===========================================================

[3-test ecc sign lurk]
ssl_conf = 3-test ecc sign lurk-ssl

[3-test ecc sign lurk-ssl]
server = 3-test ecc sign lurk-server
client = 3-test ecc sign lurk-client

[3-test ecc sign lurk-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
CipherString = DEFAULT
Lurk = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem

[3-test ecc sign lurk-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-3]
ExpectedResult = Success


# ===========================================================

[4-test ecc sign lurk with TLSv1.2]
ssl_conf = 4-test ecc sign lurk with TLSv1.2-ssl

[4-test ecc sign lurk with TLSv1.2-ssl]
server = 4-test ecc sign lurk with TLSv1.2-server
client = 4-test ecc sign lurk with TLSv1.2-client

[4-test ecc sign lurk with TLSv1.2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
CipherString = DEFAULT
Lurk = on
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem

[4-test ecc sign lurk with TLSv1.2-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-4]
ExpectedResult = Success


